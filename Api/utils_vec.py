# -*- coding: utf-8 -*-
"""utils_vec.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RFZpKZl3keRawkv6Eyp8IlTFjrvj8PCV
"""

import numpy as np

def get_vectors(embeddings, words):
  """
  Obtener vectores de palabras desde embeddings preentrenados

  Input:
    embeddings (dict): Diccionario que contiene embeddings preentrenados.
    words (list): Lista de palabras para las cuales se deben obtener los vectores.
  Output:
    x (numpy.ndarray): Matriz donde las filas son los vectores correspondientes a las palabras en la lista.
  """

  # Inicializar una matriz de ceros con dimensiones (1, 300) para almacenar vectores.
  X = np.zeros((1,300))

  for word in words:

    # Obtener el embedding de la palabra desde el diccionario de embeddings.
    emb = embeddings[word]

    # Apilar el vector de embedding como una nueva fila en la matriz X.
    X = np.row_stack((X, emb))

  X = X[1:, :]  # Eliminar la primera fila de ceros que se utilizó para inicializar la matriz.
  return X

def cosine_similarity(A, B):
  '''
  Calcula la similitud coseno entre dos vectores

  Input:
    A (np.Array): Vector A
    B (np.Array): Vector B

  Output:
    cos (float): Valor numérico que representa la similitu coseno
  '''

  dot = np.dot(A,B)
  norma = np.sqrt(np.dot(A,A))
  normb = np.sqrt(np.dot(B,B))
  cos = dot / (norma*normb)

  return cos

def euclidean(A,B):
  """
    Calcula la distancia euclidiana

    Input:
      A (np.ndArray) = Vector A
      B (np.ndArray) = Vector B

    Output:
      d (float): Valor numérico que represnta la distancia euclidiana
  """

  d = np.linalg.norm(A-B)

  return d